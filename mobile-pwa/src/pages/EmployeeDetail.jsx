import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Calendar, ArrowLeft, Download, MessageSquare, DollarSign, AlertCircle } from 'lucide-react';
import { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, parseISO } from 'date-fns';
import toast from 'react-hot-toast';
import { employeeService, attendanceService, workingDaysService } from '../services/api';

// Simple WhatsApp message generator for mobile
const generateMobileWhatsAppMessage = (data) => {
  const { employee, attendance, salary, period } = data;
  
  return `*📋 Attendance & Salary Report*

*Employee Details:*
👤 Name: ${employee.full_name}
🆔 ID: ${employee.employee_id}
🏢 Department: ${employee.department}
💰 Monthly Salary: ₹${employee.monthly_salary.toLocaleString()}

*Period:* ${format(parseISO(period.start), 'dd MMM yyyy')} to ${format(parseISO(period.end), 'dd MMM yyyy')}

*Attendance Summary:*
📅 Working Days: ${attendance.total_working_days}
✅ Days Present: ${attendance.days_present}
❌ Total Absences: ${attendance.days_absent}
💼 Paid Leaves: ${attendance.paid_leaves}
🚫 Unpaid Leaves: ${attendance.unpaid_leaves}

*Salary Calculation:*
Per Day Rate: ₹${salary.per_day_salary.toFixed(2)}
Deduction (${attendance.unpaid_leaves} unpaid): -₹${salary.deduction.toFixed(2)}
*Final Payable: ₹${salary.final_salary.toFixed(2)}*

Generated by Shinde Tractors Attendance System`;
};

export default function EmployeeDetail() {
  const { id } = useParams();
  const navigate = useNavigate();
  
  const [employee, setEmployee] = useState(null);
  const [attendance, setAttendance] = useState([]);
  const [workingDays, setWorkingDays] = useState(0);
  const [loading, setLoading] = useState(true);
  
  // Date range state
  const [selectedMonth, setSelectedMonth] = useState(new Date());
  const [startDate, setStartDate] = useState(format(startOfMonth(new Date()), 'yyyy-MM-dd'));
  const [endDate, setEndDate] = useState(format(endOfMonth(new Date()), 'yyyy-MM-dd'));
  const [useCustomRange, setUseCustomRange] = useState(false);

  useEffect(() => {
    loadEmployeeData();
  }, [id, startDate, endDate]);

  const loadEmployeeData = async () => {
    try {
      setLoading(true);
      
      // Load employee details
      const empData = await employeeService.getById(id);
      setEmployee(empData);

      // Load attendance for date range
      const attendanceData = await attendanceService.getByEmployeeAndDateRange(
        id,
        startDate,
        endDate
      );
      setAttendance(attendanceData);

      // Load working days
      const date = parseISO(startDate);
      const month = parseInt(format(date, 'M'));
      const year = parseInt(format(date, 'yyyy'));
      const workingDaysData = await workingDaysService.getWorkingDays(
        month,
        year,
        empData.department
      );
      setWorkingDays(workingDaysData?.total_working_days || 0);

    } catch (error) {
      console.error('Error loading employee data:', error);
      toast.error('Failed to load employee details');
    } finally {
      setLoading(false);
    }
  };

  const handleMonthChange = (increment) => {
    const newMonth = new Date(selectedMonth);
    newMonth.setMonth(newMonth.getMonth() + increment);
    setSelectedMonth(newMonth);
    setStartDate(format(startOfMonth(newMonth), 'yyyy-MM-dd'));
    setEndDate(format(endOfMonth(newMonth), 'yyyy-MM-dd'));
    setUseCustomRange(false);
  };

  const handleCustomRangeApply = () => {
    setUseCustomRange(true);
    loadEmployeeData();
  };

  const generateAbsenteeReport = async () => {
    try {
      if (!employee || !workingDays) {
        toast.error('Missing required data');
        return;
      }

      const totalDays = attendance.length;
      const presentDays = attendance.filter(a => a.is_present).length;
      const absentDays = attendance.filter(a => !a.is_present).length;
      const paidLeaveDays = attendance.filter(a => !a.is_present && a.is_paid_leave).length;
      const unpaidLeaveDays = absentDays - paidLeaveDays;

      const perDaySalary = employee.monthly_salary / workingDays;
      const deduction = unpaidLeaveDays * perDaySalary;
      const finalSalary = employee.monthly_salary - deduction;

      const message = generateMobileWhatsAppMessage({
        employee: {
          full_name: employee.full_name,
          employee_id: employee.employee_id,
          department: employee.department,
          monthly_salary: employee.monthly_salary
        },
        attendance: {
          total_working_days: workingDays,
          days_present: presentDays,
          days_absent: absentDays,
          paid_leaves: paidLeaveDays,
          unpaid_leaves: unpaidLeaveDays
        },
        salary: {
          per_day_salary: perDaySalary,
          deduction: deduction,
          final_salary: finalSalary
        },
        period: {
          start: startDate,
          end: endDate
        }
      });

      // Try native Web Share API first (works on mobile)
      if (navigator.share) {
        try {
          await navigator.share({
            text: message
          });
          toast.success('Report shared successfully!');
          return;
        } catch (err) {
          // User cancelled or share failed, continue to other methods
          if (err.name !== 'AbortError') {
            console.error('Share failed:', err);
          }
        }
      }

      // Fallback: Open WhatsApp directly
      const encodedMessage = encodeURIComponent(message);
      const whatsappUrl = `https://wa.me/?text=${encodedMessage}`;
      window.open(whatsappUrl, '_blank');
      toast.success('Opening WhatsApp...');

    } catch (error) {
      console.error('Error generating report:', error);
      toast.error('Failed to generate report');
    }
  };

  const getCalendarDays = () => {
    if (!employee) return [];
    const start = parseISO(startDate);
    const end = parseISO(endDate);
    return eachDayOfInterval({ start, end });
  };

  const getAttendanceForDate = (date) => {
    return attendance.find(a => isSameDay(parseISO(a.attendance_date), date));
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!employee) {
    return (
      <div className="p-4">
        <div className="text-center py-12">
          <AlertCircle className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-bold text-gray-900">Employee Not Found</h2>
          <button onClick={() => navigate('/employees')} className="btn-primary mt-4">
            Back to Employees
          </button>
        </div>
      </div>
    );
  }

  const absentDates = attendance.filter(a => !a.is_present);
  const presentDays = attendance.filter(a => a.is_present).length;
  const paidLeaves = absentDates.filter(a => a.is_paid_leave).length;
  const unpaidLeaves = absentDates.length - paidLeaves;
  
  const perDaySalary = workingDays > 0 ? employee.monthly_salary / workingDays : 0;
  const deduction = unpaidLeaves * perDaySalary;
  const finalSalary = employee.monthly_salary - deduction;

  return (
    <div className="pb-20">
      {/* Header */}
      <div className="bg-blue-600 text-white p-4 sticky top-0 z-10">
        <button
          onClick={() => navigate(-1)}
          className="flex items-center gap-2 mb-3"
        >
          <ArrowLeft className="w-5 h-5" />
          Back
        </button>
        
        <div>
          <h1 className="text-xl font-bold">{employee.full_name}</h1>
          <p className="text-blue-100 text-sm">
            {employee.employee_id} • {employee.department}
          </p>
        </div>
      </div>

      <div className="p-4 space-y-4">
        {/* Quick Info */}
        <div className="grid grid-cols-2 gap-3">
          <div className="bg-white rounded-lg p-3 shadow-sm">
            <div className="text-xs text-gray-600 mb-1">Monthly Salary</div>
            <div className="text-lg font-bold text-gray-900">₹{employee.monthly_salary.toLocaleString()}</div>
          </div>
          <div className="bg-white rounded-lg p-3 shadow-sm">
            <div className="text-xs text-gray-600 mb-1">Per Day</div>
            <div className="text-lg font-bold text-gray-900">₹{perDaySalary.toFixed(2)}</div>
          </div>
        </div>

        {/* Generate Report Button */}
        <button
          onClick={generateAbsenteeReport}
          className="w-full btn-primary flex items-center justify-center gap-2 py-3"
        >
          <MessageSquare className="w-5 h-5" />
          Generate WhatsApp Report
        </button>

        {/* Date Range Selector */}
        <div className="bg-white rounded-lg p-4 shadow-sm">
          <h3 className="font-bold text-gray-900 mb-3">Select Period</h3>
          
          <div className="flex gap-2 mb-3">
            <button
              onClick={() => {
                setUseCustomRange(false);
                setStartDate(format(startOfMonth(selectedMonth), 'yyyy-MM-dd'));
                setEndDate(format(endOfMonth(selectedMonth), 'yyyy-MM-dd'));
              }}
              className={`flex-1 px-3 py-2 rounded-lg text-sm font-medium ${
                !useCustomRange ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700'
              }`}
            >
              Monthly
            </button>
            <button
              onClick={() => setUseCustomRange(true)}
              className={`flex-1 px-3 py-2 rounded-lg text-sm font-medium ${
                useCustomRange ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700'
              }`}
            >
              Custom
            </button>
          </div>

          {!useCustomRange ? (
            <div className="flex items-center gap-2">
              <button
                onClick={() => handleMonthChange(-1)}
                className="px-3 py-2 bg-gray-100 rounded-lg text-sm"
              >
                ←
              </button>
              <div className="flex-1 text-center font-semibold">
                {format(selectedMonth, 'MMMM yyyy')}
              </div>
              <button
                onClick={() => handleMonthChange(1)}
                className="px-3 py-2 bg-gray-100 rounded-lg text-sm"
              >
                →
              </button>
            </div>
          ) : (
            <div className="space-y-2">
              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">Start Date</label>
                <input
                  type="date"
                  value={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                  className="w-full px-3 py-2 border rounded-lg"
                />
              </div>
              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">End Date</label>
                <input
                  type="date"
                  value={endDate}
                  onChange={(e) => setEndDate(e.target.value)}
                  className="w-full px-3 py-2 border rounded-lg"
                />
              </div>
              <button
                onClick={handleCustomRangeApply}
                className="w-full btn-primary py-2"
              >
                Apply
              </button>
            </div>
          )}
        </div>

        {/* Summary Cards */}
        <div className="grid grid-cols-2 gap-3">
          <div className="bg-blue-50 rounded-lg p-3">
            <div className="text-xs text-blue-600 mb-1">Working Days</div>
            <div className="text-2xl font-bold text-blue-900">{workingDays}</div>
          </div>
          <div className="bg-green-50 rounded-lg p-3">
            <div className="text-xs text-green-600 mb-1">Present</div>
            <div className="text-2xl font-bold text-green-900">{presentDays}</div>
          </div>
          <div className="bg-yellow-50 rounded-lg p-3">
            <div className="text-xs text-yellow-600 mb-1">Paid Leaves</div>
            <div className="text-2xl font-bold text-yellow-900">{paidLeaves}</div>
          </div>
          <div className="bg-red-50 rounded-lg p-3">
            <div className="text-xs text-red-600 mb-1">Unpaid</div>
            <div className="text-2xl font-bold text-red-900">{unpaidLeaves}</div>
          </div>
        </div>

        {/* Salary Calculation */}
        <div className="bg-white rounded-lg p-4 shadow-sm">
          <h3 className="font-bold text-gray-900 mb-3 flex items-center gap-2">
            <DollarSign className="w-5 h-5" />
            Salary Calculation
          </h3>
          <div className="space-y-2 text-sm">
            <div className="flex justify-between py-2 border-b">
              <span className="text-gray-600">Monthly Salary</span>
              <span className="font-semibold">₹{employee.monthly_salary.toLocaleString()}</span>
            </div>
            <div className="flex justify-between py-2 border-b">
              <span className="text-gray-600">Per Day</span>
              <span className="font-semibold">₹{perDaySalary.toFixed(2)}</span>
            </div>
            <div className="flex justify-between py-2 border-b">
              <span className="text-gray-600">Unpaid Leaves</span>
              <span className="font-semibold">{unpaidLeaves} days</span>
            </div>
            <div className="flex justify-between py-2 border-b text-red-600">
              <span>Deduction</span>
              <span className="font-semibold">-₹{deduction.toFixed(2)}</span>
            </div>
            <div className="flex justify-between py-3 bg-green-50 px-3 rounded-lg">
              <span className="font-bold text-green-900">Final Salary</span>
              <span className="text-xl font-bold text-green-900">₹{finalSalary.toFixed(2)}</span>
            </div>
          </div>
        </div>

        {/* Attendance Calendar */}
        <div className="bg-white rounded-lg p-4 shadow-sm">
          <h3 className="font-bold text-gray-900 mb-3 flex items-center gap-2">
            <Calendar className="w-5 h-5" />
            Attendance Calendar
          </h3>
          
          <div className="grid grid-cols-7 gap-1">
            {['S', 'M', 'T', 'W', 'T', 'F', 'S'].map((day, idx) => (
              <div key={idx} className="text-center font-semibold text-gray-600 text-xs py-1">
                {day}
              </div>
            ))}
            
            {getCalendarDays().map((day, idx) => {
              const attendanceRecord = getAttendanceForDate(day);
              const isAbsent = attendanceRecord && !attendanceRecord.is_present;
              const isPresent = attendanceRecord && attendanceRecord.is_present;
              
              return (
                <div
                  key={idx}
                  className={`
                    min-h-[50px] p-1 rounded text-center text-xs border
                    ${isPresent ? 'bg-green-100 border-green-300' : ''}
                    ${isAbsent && attendanceRecord?.is_paid_leave ? 'bg-yellow-100 border-yellow-300' : ''}
                    ${isAbsent && !attendanceRecord?.is_paid_leave ? 'bg-red-100 border-red-300' : ''}
                    ${!attendanceRecord ? 'bg-gray-50 border-gray-200' : ''}
                  `}
                >
                  <div className="font-bold">{format(day, 'd')}</div>
                  {isPresent && <div className="text-[10px] text-green-700">✓</div>}
                  {isAbsent && (
                    <div className="text-[10px] font-semibold">
                      {attendanceRecord.is_paid_leave ? '💼' : '✗'}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>

        {/* Absence History */}
        {absentDates.length > 0 && (
          <div className="bg-white rounded-lg p-4 shadow-sm">
            <h3 className="font-bold text-gray-900 mb-3">Absence History</h3>
            <div className="space-y-2">
              {absentDates.map((record) => (
                <div key={record.id} className="p-3 bg-gray-50 rounded-lg">
                  <div className="flex items-center gap-2 mb-1">
                    <span className="font-semibold text-sm">
                      {format(parseISO(record.attendance_date), 'dd MMM yyyy')}
                    </span>
                    <span className={`px-2 py-0.5 rounded-full text-xs font-semibold ${
                      record.is_paid_leave ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'
                    }`}>
                      {record.is_paid_leave ? 'Paid' : 'Unpaid'}
                    </span>
                  </div>
                  {record.absence_reason && (
                    <p className="text-xs text-gray-600">{record.absence_reason}</p>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
